name: Sync Dotfiles

on:
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run when dotfiles repo updates (requires webhook)
  repository_dispatch:
    types: [dotfiles-updated]

jobs:
  sync-dotfiles:
    runs-on: ubuntu-latest
    permissions:
      contents: write        # Required to push commits
      pull-requests: write   # Required to create PRs

    steps:
      - name: Checkout justin-os
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Checkout dotfiles repo
        uses: actions/checkout@v5
        with:
          repository: zoro11031/dotfiles
          path: dotfiles-sync
          # Use DOTFILES_PAT if configured for private repos, otherwise use GITHUB_TOKEN
          # Falls back to GITHUB_TOKEN for public repos when DOTFILES_PAT is not configured
          token: ${{ secrets.DOTFILES_PAT || secrets.GITHUB_TOKEN }}
          
      - name: Copy updated configs
        run: |
          # Copy zsh configs
          if [ -f dotfiles-sync/zsh/.zshrc ]; then
            cp dotfiles-sync/zsh/.zshrc files/home/.zshrc
          fi
          
          if [ -f dotfiles-sync/zsh/.p10k.zsh ]; then
            cp dotfiles-sync/zsh/.p10k.zsh files/home/.p10k.zsh
          fi
          
          # Copy bash configs
          if [ -f dotfiles-sync/bash/.bashrc ]; then
            cp dotfiles-sync/bash/.bashrc files/home/.bashrc
          fi
          
          # Copy ghostty config
          if [ -f dotfiles-sync/ghostty/.config/ghostty/config ]; then
            mkdir -p files/home/.config/ghostty
            cp dotfiles-sync/ghostty/.config/ghostty/config files/home/.config/ghostty/config
          fi
          
          # Copy neovim configs
          if [ -d dotfiles-sync/nvim/.config/nvim ]; then
            mkdir -p files/home/.config/nvim
            # Use rsync to handle hidden files and empty directories
            rsync -a dotfiles-sync/nvim/.config/nvim/ files/home/.config/nvim/
          fi
          
          # Copy git configs
          if [ -f dotfiles-sync/git/.gitconfig ]; then
            cp dotfiles-sync/git/.gitconfig files/home/.gitconfig
          fi
          
          # Copy tmux config
          if [ -f dotfiles-sync/tmux/.tmux.conf ]; then
            cp dotfiles-sync/tmux/.tmux.conf files/home/.tmux.conf
          fi
          
          # Copy vim config
          if [ -f dotfiles-sync/vim/.vimrc ]; then
            cp dotfiles-sync/vim/.vimrc files/home/.vimrc
          fi
          
      - name: Check for changes
        id: check_changes
        run: |
          # Check for both tracked modifications and untracked files in files/home/
          # Scoped to files/home/ to ignore the dotfiles-sync checkout directory
          if [ -z "$(git status --porcelain -- files/home/)" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No changes detected"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "Changes detected:"
            git status --porcelain -- files/home/
          fi
          
      - name: Create PR with changes
        if: steps.check_changes.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eo pipefail

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Capture timestamp once for consistency
          TIMESTAMP="$(date +%Y%m%d-%H%M%S)"
          DATE_ONLY="$(date +%Y-%m-%d)"

          # Detect default branch dynamically
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "Using base branch: $DEFAULT_BRANCH"

          # Create a new branch
          BRANCH_NAME="sync-dotfiles-$TIMESTAMP"
          git checkout -b "$BRANCH_NAME"

          # Stage and commit changes
          git add files/home/

          # Generate description of changes
          PR_BODY="$RUNNER_TEMP/pr_body.md"
          echo "## Changed Files" > "$PR_BODY"
          echo "" >> "$PR_BODY"

          # Use process substitution to avoid subshell issue
          while IFS= read -r file; do
            echo "- \`$file\`" >> "$PR_BODY"
          done < <(git diff --cached --name-only)

          echo "" >> "$PR_BODY"
          echo "## Summary of Changes" >> "$PR_BODY"
          echo "" >> "$PR_BODY"
          git diff --cached --stat >> "$PR_BODY"
          echo "" >> "$PR_BODY"
          echo "---" >> "$PR_BODY"
          echo "Auto-synced from [zoro11031/dotfiles](https://github.com/zoro11031/dotfiles)" >> "$PR_BODY"

          # Commit
          git commit -m "chore: sync dotfiles from zoro11031/dotfiles"

          # Push to remote
          git push -u origin "$BRANCH_NAME"

          # Create PR
          gh pr create \
            --title "chore: sync dotfiles - $DATE_ONLY" \
            --body-file "$PR_BODY" \
            --base "$DEFAULT_BRANCH"

          # Clean up temporary file
          rm -f "$PR_BODY"
          
      - name: Cleanup
        if: always()
        run: |
          rm -rf dotfiles-sync
